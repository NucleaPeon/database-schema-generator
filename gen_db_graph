#!/usr/bin/env python3
"""
Database Schema Graph-producing Python3-compatible script

Based on the following link:
http://iszak.net/2013/09/01/generating-schema-graphs-with-sqlachemy-and-macports.html

Only writes in png format

Licensed under the MIT License
"""
import os
import sys
import argparse

from sqlalchemy import MetaData, create_engine
from sqlalchemy_schemadisplay import create_schema_graph

def dry_run(connection_string):
    engine = create_engine(connection_string)
    connection = engine.connect()
    connection.close()

def write_svg(path, dbname, overwrite=False):
    if not os.path.exists(path):
        raise FileNotFoundError("Diagram path {} not found".format(path))

    if os.path.exists(path) and not overwrite and not os.path.isdir(path):
        raise PermissionError("Unable to overwrite existing file {}".format(path))

    if os.path.isdir(args.output):
        graph.write_svg(os.path.join(args.output, "{}-schema.svg".format(dbname)))

    else:
        graph.write_svg(os.path.join(args.output))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="SqlAlchemy Database Diagram Generator Script")
    parser.add_argument("--db-engine", "-d", help="Specify database engine to connect to (Ex: postgres)",
                        nargs='?')
    parser.add_argument("--dialect", "-a", help="Specify the dialect of sqlalchemy for the database",
                        nargs='?')
    parser.add_argument("--db-name", "-n", help="Specify the database name to connect to",
                        nargs='?')
    parser.add_argument("--username", "-u", help="Database username used to login",
                        nargs='?')
    parser.add_argument("--password", "-p", help="Database password for specified user",
                        nargs='?')
    parser.add_argument("--host", "-o", help="Database hostname, defaults to localhost",
                        nargs='?', default="localhost")
    parser.add_argument("--indexes", "-i", help="Show Indexes in graph", action="store_true", default=False)
    parser.add_argument("--data-types", "-t", help="Show Data TYpes in graph", action="store_true", default=False)
    parser.add_argument("--dry-run", help="Connect to the database using specified credentials and immediately exit",
                        action="store_true", default=False)
    parser.add_argument("--output", help="Directory for image output", default=os.getcwd(),
                        nargs='?')
    parser.add_argument("--overwrite", help="Overwrite an existing database diagram file (if exists)",
                        action="store_true", default=False)

    args = parser.parse_args()

    # Enable proper formatting of the database connection string even when dialect is present
    # Combine into one variable
    database = args.db_engine
    if not args.dialect is None and not database is None:
        database = "{}+{}".format(database, args.dialect)

    data = (args.db_engine, args.username, args.password,
                                             args.host, args.db_name,)
    if None in data:
        print(args)
        raise ValueError("One or more connection attributes is a NoneType")

    dbconnection = "{}://{}:{}@{}/{}".format(*data)

    if args.dry_run:
        try:
            dry_run(dbconnection)
            sys.exit(0)

        except Exception as E:
            print("Dry run failed: {}".format(E))
            sys.exit(1)

    try:
        graph = create_schema_graph(
            metadata=MetaData(dbconnection),
            show_datatypes=False,
            show_indexes=False
        )


        write_svg(args.output, args.db_name, args.overwrite)


    except Exception as E:
        print("Exception occured when generating schema diagram")
        print(str(E))
        sys.exit(1)

    sys.exit(0)